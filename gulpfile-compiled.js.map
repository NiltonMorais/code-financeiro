{"version":3,"sources":["gulpfile.js"],"names":[],"mappings":";;AAAA,IAAM,OAAO,QAAQ,MAAR,CAAb;AACA,IAAM,SAAS,QAAQ,gBAAR,CAAf;AACA,IAAM,UAAU,QAAQ,SAAR,CAAhB;AACA,IAAM,mBAAmB,QAAQ,oBAAR,CAAzB;AACA,IAAM,gBAAgB,QAAQ,kBAAR,CAAtB;AACA,IAAM,mBAAmB,QAAQ,sBAAR,CAAzB;AACA,IAAM,eAAe,QAAQ,eAAR,CAArB;AACA,IAAM,MAAM,QAAQ,UAAR,CAAZ;AACA,IAAM,kBAAkB,QAAQ,kBAAR,CAAxB;AACA,IAAM,OAAO,QAAQ,WAAR,CAAb;;AAEA;;;;;;;;AAQA;;;;;;;;;;;AAWA,KAAK,IAAL,CAAU,YAAV,EAAuB,YAAI;AACvB,QAAI;AACA,cAAM,MADN;AAEA,cAAM;AAFN,KAAJ;AAIA,QAAI,YAAY,QAAQ,cAAR,CAAhB;AACA,QAAI,SAAS,gBAAgB,SAAhB,CAAb;AACA,WAAO,KAAK,WAAL,CAAP;AACH,CARD;;AAUA,KAAK,IAAL,CAAU,oBAAV,EAA+B,YAAM;AACjC,QAAI,SAAS,aAAa,aAAb,EAA4B,gBAA5B,CAAb;AACA,QAAI,YAAY,CACZ,wBADY,EAEZ,iDAFY,CAAhB;;AAKA,WAAO,KAAP,CAAa,KAAb,GAAqB,CAAC,OAAO,KAAP,CAAa,KAAd,EAAqB,MAArB,CAA4B,SAA5B,CAArB;AACA,WAAO,KAAP,CAAa,GAAb,GAAmB,CAAC,OAAO,KAAP,CAAa,GAAd,EAAmB,MAAnB,CAA0B,SAA1B,CAAnB;;AAEA,QAAI,gBAAJ,CAAqB,QAAQ,MAAR,CAArB,EAAqC;AACjC,aAAK,IAD4B;AAEjC,eAAO;AACH,iBAAK;AADF,SAF0B;AAKjC,sBAAc;AACV,kBAAM,IADI;AAEV,8BAAkB;AAFR,SALmB;AASjC,oBAAY,OAAO,MAAP,CAAc,UATO;AAUjC,gBAAQ,IAVyB;AAWjC,eAAO,EAAC,QAAQ,IAAT;AAX0B,KAArC,EAYG,MAZH,CAYU,IAZV,EAYe,SAZf,EAYyB,YAAI;AACzB,gBAAQ,GAAR,CAAY,oBAAZ;AACH,KAdD;AAeH,CAzBD;;AA2BA,OAAO,eAAO;AACV,QAAI,IAAJ,CAAS,0CAAT,EACK,IADL,CACU,sCADV,EAEK,IAFL,CAEU,6CAFV,EAEwD,uBAFxD;;AAIA,SAAK,KAAL,CAAW,oBAAX;;AAEA,QAAI,WAAJ,CAAgB;AACZ,cAAM,SADM;AAEZ,eAAO;AAFK,KAAhB;AAIG;AACN,CAZD","file":"gulpfile-compiled.js","sourcesContent":["const gulp = require('gulp');\nconst elixir = require('laravel-elixir');\nconst webpack = require('webpack');\nconst WebpackDevServer = require('webpack-dev-server');\nconst webpackConfig = require('./webpack.config');\nconst webpackDevConfig = require('./webpack.dev.config');\nconst mergeWebpack = require('webpack-merge');\nconst env = require('gulp-env');\nconst stringifyObject = require('stringify-object');\nconst file = require('gulp-file');\n\n/*require('laravel-elixir-vue');\nrequire('laravel-elixir-webpack-official');\n\nElixir.webpack.config.module.loaders = [];\n\nElixir.webpack.mergeConfig(webpackConfig);\nElixir.webpack.mergeConfig(webpackDevConfig);*/\n\n/*\n |--------------------------------------------------------------------------\n | Elixir Asset Management\n |--------------------------------------------------------------------------\n |\n | Elixir provides a clean, fluent API for defining some basic Gulp tasks\n | for your Laravel application. By default, we are compiling the Sass\n | file for our application, as well as publishing vendor resources.\n |\n */\n\ngulp.task('spa-config',()=>{\n    env({\n        file: '.env',\n        type: 'ini'\n    });\n    let spaConfig = require('./spa.config');\n    let string = stringifyObject(spaConfig);\n    return file('config.js')\n});\n\ngulp.task('webpack-dev-server',() => {\n    let config = mergeWebpack(webpackConfig, webpackDevConfig);\n    let inlineHot = [\n        'webpack/hot/dev-server',\n        'webpack-dev-server/client?http://localhost:8080'\n    ];\n\n    config.entry.admin = [config.entry.admin].concat(inlineHot);\n    config.entry.spa = [config.entry.spa].concat(inlineHot);\n\n    new WebpackDevServer(webpack(config),{\n        hot: true,\n        proxy: {\n            '*': 'http://localhost:8000'\n        },\n        watchOptions: {\n            poll: true,\n            aggregateTimeout: 300\n        },\n        publicPath: config.output.publicPath,\n        noInfo: true,\n        stats: {colors: true}\n    }).listen(8080,\"0.0.0.0\",()=>{\n        console.log(\"Bundling project..\");\n    });\n});\n\nelixir(mix => {\n    mix.sass('./resources/assets/admin/sass/admin.scss')\n        .sass('./resources/assets/spa/sass/spa.scss')\n        .copy('./node_modules/materialize-css/fonts/roboto','./public/fonts/roboto');\n\n    gulp.start('webpack-dev-server');\n\n    mix.browserSync({\n        host: '0.0.0.0',\n        proxy: 'http://localhost:8080'\n    });\n       //.webpack('app.js');\n});\n"]}